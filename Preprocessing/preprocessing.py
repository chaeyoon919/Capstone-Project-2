# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vd3iu7hAv38mdmgFaDWJvzmDh-2kdTGi
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import seaborn as sns
import os
import io
import cv2
import matplotlib
import random
import glob

import warnings
warnings.filterwarnings('ignore')

matplotlib.pyplot.rcParams['figure.figsize'] = (10,5)

# 색상 코드 정의(32개)
color_codes = {
    'Animal':[64, 128, 64],
  'Archway':[192, 0, 128],
  'Bicyclist':[0, 128, 192],
  'Bridge':[0, 128, 64],
  'Building':[128, 0, 0],
  'Car':[64, 0, 128],
  'CartLuggagePram':[64, 0, 192],
  'Child':[192, 128, 64],
  'Column_Pole':[192, 192, 128],
  'Fence':[64, 64, 128],
  'LaneMkgsDriv':[128, 0, 192],
  'LaneMkgsNonDriv':[192, 0, 64],
  'Misc_Text':[128, 128, 64],
  'MotorcycleScooter':[192, 0, 192],
  'OtherMoving':[128, 64, 64],
  'ParkingBlock':[64, 192, 128],
  'Pedestrian':[64, 64, 0],
  'Road':[128, 64, 128],
  'RoadShoulder':[128, 128, 192],
  'Sidewalk':[0, 0, 192],
  'SignSymbol':[192, 128, 128],
  'Sky':[128, 128, 128],
  'SUVPickupTruck':[64, 128, 192],
  'TrafficCone':[0, 0, 64],
  'TrafficLight':[0, 64, 64],
  'Train':[192, 64, 128],
  'Tree':[128, 128, 0],
  'Truck_Bus':[192, 128, 192],
  'Tunnel':[64, 0, 64],
  'VegetationMisc':[192, 192, 0],
  'Void':[0, 0, 0],
  'Wall':[64, 192, 0] 
}

NEW_SIZE = (128, 128) # 사이즈 정의
N_CLASSES = len(color_codes.keys()) # 클래스 수 정의

# Original_data 경로 불러오기
path_to_img = sorted(glob.glob('/content/drive/MyDrive/dataset/Original_data/*.png'))
print(path_to_img)

images = []
# image_save 함수 정의
def image_save(Path_To_Img):
  for i in range(701):
    img = cv2.imread(Path_To_Img[i]) # 이미지 불러오기
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # BGR -> RGB 변경
    img = cv2.resize(img, (128, 128)) # 사이즈 변경(128,128)
    images.append(img)

# 함수 적용
image_save(path_to_img)

# Labeled_data 경로 불러오기
path_to_mask_img = sorted(glob.glob('/content/drive/MyDrive/dataset/Labeled_data/*.png'))

masks = []
# mask_save 함수 정의
def mask_save(Path_To_Img):
  for i in range(701):
    img = cv2.imread(Path_To_Img[i]) # 이미지 불러오기
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (128, 128)) # 사이즈 변경(128,128)
    masks.append(img)

# 함수 적용
mask_save(path_to_mask_img)

# get_masks_one_hot 함수 정의
def get_masks_one_hot(mask, color_codes):
  
    '''
      n_channels: 클래스 수 정의
      mask_channels: (128, 128, 32) shape 0으로 변경
      color: 라벨 이름 정의
      sub_mask: mask와 color이 일치하는 부분을 1, 아닌 부분을 0 정의
     ''' 
    n_channels = len(color_codes.keys())  
    mask_channels = np.zeros((mask.shape[0], mask.shape[1], n_channels), 
                             dtype=np.float32)
    for i, cls in enumerate(color_codes.keys()):
        color = color_codes[cls]
        sub_mask = np.all(mask==color, axis=-1) * 1
        mask_channels[:, :, i] = sub_mask
    return mask_channels

# get_masks_one_hot 적용
masks_one_hot = [get_masks_one_hot(mask, color_codes) for mask in masks]

from sklearn.model_selection import train_test_split

# train, validation, test 6:2:2로 분할
x_trainval, x_test, y_trainval, y_test = train_test_split(images, masks_one_hot, test_size=0.2, random_state=42, shuffle=True)

x_train, x_val, y_train, y_val = train_test_split(x_trainval, y_trainval, test_size=0.2, random_state=42, shuffle=False)

print('Training set: {}\nValidation set: {}\nTesting set: {}'.format(
    (len(x_train), len(y_train)), (len(x_val), len(y_val)), (len(x_test), len(y_test))))